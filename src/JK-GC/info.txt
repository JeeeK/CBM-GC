Super Garbage Collection
========================
1985-2019 J. E. Klasek j klasek.at


ACME source version, with german comments.
Based on HypraAss' version from 1985-12-27


Versions
--------

The very first production version 1.0 has been used as a patched
version where the zero-page locatioin save from line 1090 to 1100
is to late (after they habe been changed).
Because these locations aren't used by BASIC and KERNAL this is not a
real problem. However, in day by day use just the monitor-patched
version was used from 1985 on.

1985-12-27 VERS. 1.1    Original version
	HypraAss: (path hypraass/)
		This version contains 2 bugs:
		1. Zero-page location save done to late.
		2. Buffer reserved space of 256 bytes are missing.
		This version was only in use in a monitor-patched
		variant, which fixed this bugs.
		According to the soure code the start address is at
		$C500. The commonly used version is the patched
		version moved to $CDEF, but accidentally ends
		at location $D000 which will be currupted!
		It was intented that $CFFF should be the end address,
		but only 5 bytes are reserved instead of 6.
	ACME: bugs fixed: (path acme/)
		The zero-page location save part with initialisation of
		FLAG from line 1105 to 1120 has been moved right before
		the first use. 
		The curruption of $D000 will be prevented (destroying
		the sprite 0 X position register).

2013-11-24 VERS. 2.0	Vastly optimized, but with two severe bugs:
	1. String Descriptor Stack (SDS) bug:
	   The GC might hang in while processing the SDS in the case the SDS
	   contains a non-empty string!
	2. The reserved buffer space of 256 bytes is missing. This was a bug
	   from SuperGC V1.1 in HypraAss version 1.1, which has been already
	   fixed, but was reintroduced because the fix wasn't commented.

2019-02-15 VERS. 2.1    revised version with eliminated bugs from V2.0
			plus additional optimizations:
	1. There is no need for an extra FLAG variable to recognise the
	   end-condition.
	2. The returned status of Routine GETSA is given by the zero flag
	   (instead have to explicitely read the location LEN).
	3. String copy routine for transfering into the buffer: Entry
	   part shortened becaused a length 0 situation will never
	   occur.
	4. The code for the SDS processing has been restructured
	   (X-register based)
	5. Removed an unused LDA statement during the variable processing.
	6. Clearer structuring of the array processing.

	A set debugging option maps the buffer into a hires screen while
	the GC is running.
	See chapter Debugging below.

2020-10-10 VERS. 2.2	feature version with new IRQ hook method

	The new IRQ hook method comes without the need for a RAM copy of
	the BASIC ROM and without patching the legacy GC routine. An
	IRQ handler is hooked in and an eventually running old GC routine
	is taken over by the new routine (on the fly). Advantage: RAM
	below the BASIC ROM is left for other usage, or could be used as
	the GC buffer (instead of $E000 to $FFFF).

	An already existing IRQ handler hook is chained up.

        From the source code these 3 variants could be derived:
          1. the old method of patching the RAM copy of BASIC
          2. the IRQ hook method with buffer at $A000-$BFFF
          3. the IRQ hook method with buffer at $E000-$FFFF



Prerequisites
-------------

acme			ACME cross-assembler executable 
			at least in version 0.96.4 with report option -r


Files
-----

Makefile		assemble the program
debug.asm		optional debugging module, which maps
			the GC buffer into the hires screen.
info.txt		this file

jk-gc-basic.l		list output of ACME assembler run
jk-gc-basic.o		code (binary) - BASIC ROM hook
jk-gc-basic.r		report output of ACME assembler run

jk-gc-irqa.l		list output of ACME assembler run
jk-gc-irqa.o		code (binary) - IRQ hook, buffer at $A000
jk-gc-irqa.r		report output of ACME assembler run

jk-gc-irqe.l		list output of ACME assembler run
jk-gc-irqe.o		code (binary) - IRQ hook, buffer at $A000
jk-gc-irqe.r		report output of ACME assembler run

jk-gc.asm		assembler source for ACME
jk-gc.o			code (binary), default variant
supergc.txt		SuperGC usage: initialisation sequence for
			BASIC (loader and installer).
			(jk-gc.o has to be named as "supergc")


Original version
----------------


derived from the 1985 HypraAss source:

../../../tools/hacat -n ../hypraass/s-gc-8-dok.prg



Usage
-----

### Activate

For a binary starting at 50432 ($C500) all variants contains at the
location $C536 the value $A9.

1 ifpeek(50486)<>169thenload"supergc",8,1
2 sys50432

With this sequence all variants of the Super GC can be loaded and
activated.

The default version is the one with IRQ hook with the buffer located in
the RAM under the BASIC ROM ($A000 - $BFFF).


### Deactivate

For IRQ hook (default variant):

Mask interrupts (disable CIA interrupts sperren, $DC0E),
Restore the IRQ vektor with the default value $EA31,
Reenable interrupts ($FF5E):

poke56334,0:poke788,49:poke789,234:sys65374


For BASIC hook:

Switch back from RAM to ROM:

poke1,55




Debugging
---------

Since Version 2.1 the source code contains the option "debug" which
graphically displays the fillup of the GC buffer in the RAM underneath
the KERNAL. This function takes some time because on each call of the GC
the graphic screen is cleared in conjunction with a artifical delay
which allows the user to look at the resulting graphic.

With this activiated option (remove the comment) the source "debug.asm"
is included.



Assembling with ACME
--------------------

2011-02-28 JK

Source with ACME assembler-syntax: jk-gc.asm 

Typical adapations:

 * "ASL A"  -> "ASL"
 * .BYTE -> !byte
 * !to "jk-gc.o", cbm
   ; set output file and format (has to placed right after the
   ; setup of the program counter)



