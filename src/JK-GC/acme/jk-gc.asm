*= $CDEF
!to "jk-gc.o", cbm	; set output file and format
;
;.OPT LIST,NOSYM
;
; *************************
; *  GARBAGE  COLLECTION  *
; *   VON JOHANN KLASEK   *
; * 1985-12-27 VERS. 1.1  *
; *************************
;
; AUFRUF: SYS ...
; RÄUMT STRINGSPEICHER AUF
; ES WERDEN NUR JENE SPEICHERSTELLEN
; BENUTZT, DIE AUCH DIE NORMALE
; GC VERWENDET; ALLE ANDEREN
; WERDEN WIEDER RESTAURIERT.

STRPTR = $33	; STRING POINTER = FRETOP
BUFPTR = $5F	; BUFFER POINTER
STRADR = $58	; STRING ADDRESS
STRDP  = $22	; STRING DESCRIPTOR ADDRESS
MEMBEG = $31	; MEMORY BEGINN = STREND

MEMEND = $37	; MEMORY END
BERANF = $FB	; BEREICHSANFANG
BEREND = $FD	; BEREICHSENDE
FLAG   = $53	; ENDE-FLAG
LEN    = $4E	; STRING LENGTH
STAT   = $4F	; STRING STATE
PTR    = $50	; ARRAY POINTER

TOSS   = $19	; TOP OF STRINGSTACK
EOSS   = $22	; END OF STRIKNGSTACK +1
TSSP   = $16	; TEMP. STRINGSTACK POINTER

FRETOP = $33	; STRINGS START
STREND = $31	; ARRAYS END +1
ARYTAB = $2F	; ARRAY START
VARTAB = $2D	; VARIABLES START


CPTR   = $FB

INIT
	LDA #$37
	STA $01		; ALLES ROM
	LDY #0
	STY CPTR
	LDA #$A0
	STA CPTR+1	; BASIC-ROM ANFANG
	LDX #>($2000)	; BASIC-ROM LÄNGE
CPYROM	LDA (CPTR),Y	; ROM LESEN
	STA (CPTR),Y	; RAM SCHREIBEN
	INY
	BNE CPYROM
	INC CPTR+1
	DEX
	BNE CPYROM
	LDA $01
	AND #%11111110	; BASIC-ROM AUS MASKE
	STA $01
	LDA #<COLLECT	; JMP COLLECT
	STA $B527	; PATCHEN ...
	LDA #>COLLECT
	STA $B528
	LDA #$4C	; JMP-OPCODE
	STA $B526
	RTS

COLLECT
	SEI		; BETRIEBSSYS.-ROM
	LDA $01		; WEGBLENDEN
	PHA		; DAMIT RAM ZUGÄNGLICH
	LDA #$35	; WIRD.
	STA $01

	LDY #3		; ZEROPAGE-REG.
L10	LDA $FB,Y	; RETTEN
	STA SPTR+2,Y
	DEY
	BPL L10
	INY
	STY FLAG	; ENDEFLAG=0 (NEIN)
	LDA PTR		; PTR-REGISTER RETTEN
	LDX PTR+1
	STA SPTR
	STX SPTR+1
	LDA MEMEND	; STRING POINTER
	STA STRPTR	; UND BEREICHSANFANG
	LDX MEMEND+1	; AUF SPEICHERENDE
	STX STRPTR+1	; SETZEN
	STA BERANF
	STX BERANF+1

BEGIN1	LDX BERANF	; *** HAUPTSCHLEIFE ***
	LDA BERANF+1	; BEREICH
	STX BEREND	; UM CA. 8K
	STA BEREND+1	; NACH UNTEN VERLEGEN
	SEC
	SBC #$1F	; 8K - 1 PAGE
	BCC L2
	STA BERANF+1
	CPX STREND	; STRINGBEREICHENDE
	SBC STREND+1	; ERREICHT?
	BCS L1
L2	INC FLAG	; JA, ENDEFLAG SETZEN
	LDA STREND	; BEREICHANFANG =
	LDX STREND+1	; SPEICHERANFANG
	STA BERANF	; BEREICHANFANG = BEREICHENDE
	STX BERANF+1	; (SONDERFALL)
	CMP BEREND	; -> BEREICH IST 0 BYTE LANG
	BNE L1		; -> FERTIG
	CPX BEREND+1
	BEQ ENDE
L1	LDA #0		; BUFFERPOINTER AUF
	STA BUFPTR	; $10000 (65536) = 0
	STA BUFPTR+1	; SETZEN.
	SEC

BEGIN2	JSR GETSA	; NÄCHSTE STRINGADRESSE HOLEN
	LDA LEN		; WENN 0, DANN
	BEQ WEITER	; KEINEN STRING MEHR
	TYA		; GEFUNDEN!
	CPX BERANF	;
	SBC BERANF+1
	BCC L3		; LIEGT STRINGADRESSE
	TYA		; IM BEREICH?
	CPX BEREND
	SBC BEREND+1	; AUSSERHALB, DANN
	BCS L3		; NÄCHSTER STRING!
	SEC
	LDA BUFPTR	; STRINGLÄNGE VERSCHIEBEN
	SBC LEN
	STA BUFPTR
	BCS L4
	DEC BUFPTR+1
L4	STY STRADR+1	; STRINGADRESSE ABSPEICHERN
	STX STRADR
	LDX LEN		; STRING IN DEN BUFFERBEREICH
	LDY #0
LOOP1	LDA (STRADR),Y	; ÜBERTRAGEN
	STA (BUFPTR),Y
	INY
	DEX
	BNE LOOP1
	CLC
	LDA BUFPTR	; NEUE STRINGADRESSE BERECHNEN!
	ADC STRPTR
	STA STRADR	; STRADR=BUFPTR-(65536-STRPTR)
	LDA BUFPTR+1
	ADC STRPTR+1	; 16-BIT BERECHNUNG
	STA STRADR+1	; -> 65536 = 0 -> SA=BP+SP
	JSR CORR	; STRINGADRESSE IM DESCRIPTOR ÄNDERN
L3	CLC
	JMP BEGIN2	; NÄCHSTER STRING
WEITER	LDA BUFPTR	; BUFFER LEER?
	ORA BUFPTR+1
	BEQ L6		; JA, DANN BRAUCHT NICHTS
	CLC		; VERSCHOBEN WERDEN!
	LDA STRPTR
	TAX
	ADC BUFPTR	; VERSCHIEBE PARAMETER
	STA STRPTR	; ERMITTELN
	LDA STRPTR+1
	TAY
	ADC BUFPTR+1	; BUFPTGR= QUELLBLOCKANFANG
	STA STRPTR+1
	LDA #$00	; QUELLBLOCKENDE
	STA $5A
	STA $5B
	STX $58		; ZIELBLOCKEND+1
	STY $59
	JSR $A3BF	; BASIC-ROUTINE BLOCKVERSCHIEBEN
L6	LDA FLAG	; ENDFLAG GESETZT?
	BNE ENDE
	JMP BEGIN1	; NÄCHSTEN BEREICH UNTERSUCHEN

ENDE	PLA		; URSPRÜNGLICHER ZUSTAND
	STA $01		; KERNAL-ROM WIEDER AKTIVIEREN
	CLI
	LDA SPTR	; ZEROPAGE REGISTER WIEDER
	LDX SPTR+1	; HERSTELLEN.
	STA PTR
	STX PTR+1
	LDY #3
L11	LDA SPTR+2,Y
	STA $FB,Y
	DEY
	BPL L11
	RTS

;
; GETSA: ( C, STRDP -> STRDP, LEN, X, Y )
;

GETSA	BCC G1		; C=0 -> NÄCHSTEN STRING
	LDA #0		; ZUM NORMALEN EINSPRUNG
	STA STRDP+1	; TEMP. STRINGSTACK DURCHSUCHEN ...
	LDX #TOSS-3	; DESCRIPTOR-POINTER
	STX STRDP	; SETZEN ...
	LDA #3		; STATUS: TEMP. STRING-STACK
	STA STAT
DSTCK	LDA STRDP	; NÄCHSTEN DESCRIPTOR
	CLC
	ADC #3		; DESCRIPTOR-LÄNGE
	STA STRDP
	LDY #0
	LDA (STRDP),Y	; LÄNGE
	STA LEN
	INY
	LDA (STRDP),Y	; ADR. LOW
	TAX
	INY
	LDA (STRDP),Y	; ADR. HIGH
	TAY
	LDA TSSP	; STRING-STACK ENDE?
	CMP STRDP
	BEQ VARS	; ENDE, DANN WEITER MIT VARIABLEN
	LDA LEN
	BEQ DSTCK	; LEERER STRING, DANN NÄCHSTEN
	RTS

VARS	LDA VARTAB	; VARIABLENANFANG
	LDX VARTAB+1
	STA STRDP
	STX STRDP+1
	LDA STRDP
	LDY #2		; STATUS: EINFACHE VARIABLEN
	STY STAT
	BNE V1
VAR	CLC		; NÄCHSTE VARIABLE
	LDA STRDP
	ADC #7		; VARIABLENLÄNGE
	STA STRDP
	BCC V1
	INC STRDP+1
V1	LDX STRDP+1	; VAR-ENDE (=ARRAY-ANFANG)?
	CPX ARYTAB+1
	BNE G2
	CMP ARYTAB
	BEQ N2		; VARS ENDE, WEITER MIT ARRAYS
G2	LDY #0		; VARIABLENNAME
	LDA (STRDP),Y	; 1. ZEICHEN
	BMI VAR		; KEIN STRING, NÄCHSTE V.
	INY
	LDA (STRDP),Y
	BPL VAR		; KEIN STRING, NÄCHSTE V.
	INY
	LDA (STRDP),Y	; STRINGLÄNGE
	BEQ VAR		; = 0, NÄCHSTE V.
	STA LEN
	INY
	LDA (STRDP),Y	; ADRESSE LOW
	TAX
	INY
	LDA (STRDP),Y	; ADRESSE HIGH
	TAY
	RTS

G1	LDA STAT	; GETSA FORTSETZUNGSEINSTIEG
	CMP #2		; STATUS STRING?
	BCC ARRAY	; =1 -> ARRAY
	BEQ VAR		; =2 -> VARIABLE
	JMP DSTCK	; =3 -> STRING DESC. STACK

N2	STA PTR		; ARRAY-POINTER
	STX PTR+1
	LDY #1
	STY STAT	; ARRAYS-STATUS
NEXTARR	LDA PTR
	LDX PTR+1
	CPX STREND+1
        BNE A1
	CMP STREND
	BEQ N3		; ARRAYS FERTIG
A1	STA STRDP	; C=0
	STX STRDP+1
	LDY #0
	LDA (STRDP),Y	; ARRAY-NAME
	TAX
	INY
	LDA (STRDP),Y
	PHP		; VAR-TYP MERKEN
	INY
	LDA (STRDP),Y	; ZUM NÄCHSTEN ARRAY
	ADC PTR		; C IST BEREITS 0
	STA PTR
	INY
	LDA (STRDP),Y
	ADC PTR+1
	STA PTR+1
	PLP		; VAR-TYP HOLEN
	BPL NEXTARR	; KEIN STRINGARRAY
	TXA
	BMI NEXTARR	; KEIN STRINGARRAY
	INY
	LDA (STRDP),Y	; ANZAHL DER DIMENSIONEN
	LDY #0
	ASL		; *2
	ADC #2		; +2 (VARNAME)
	ADC STRDP
	STA STRDP
	BCC ARRAY
	INC STRDP+1
ARRAY	CLC
	LDA STRDP
	ADC #3		; STRING-DESCRIPTOR-LÄNGE
	STA STRDP
	BCC A5
	INC STRDP+1
A5	LDX STRDP+1
	CPX PTR+1	; ARRAY DURCH?
	BNE A6
	CMP PTR
	BEQ NEXTARR
A6	LDY #0
	LDA (STRDP),Y	; STR.-LÄNGE
	BEQ ARRAY	; WEITER IM ARRAY
	STA LEN
	INY
	LDA (STRDP),Y	; ADRESSE LOW
	TAX
	INY
	LDA (STRDP),Y	; ADRESSE HIGH
	TAY
	RTS		; IN X/Y RETOUR

N3	LDA #0
	STA LEN
	RTS

;
; CORR ( STRADR, STAT -> )
;
CORR	LDA STAT	; STR.-ADR. KORRIGIEREN
	ASL		; * 2 (C=0)
	ADC #$FF	; MINUS 1
	AND #3		; NUR 2 BITS
	TAY
	LDA STRADR	; LAGE DES DESCRIPTORS
	STA (STRDP),Y	; ... BEI STR. STACK
	INY		; ... UND ARRAY VERSCHIEDEN!
	LDA STRADR+1
	STA (STRDP),Y
	RTS

SPTR	!byte 0,0,0,0,0,0 ; 6 BYTE ZERO PAGE SAVE

